// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Core.Entities.LocationSearchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LatLong")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherSummaryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WoeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherSummaryId")
                        .IsUnique();

                    b.ToTable("LocationSearchResults");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Core.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MenuId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Core.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CrawlRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherSummaryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherSummaryId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Core.Entities.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Core.Entities.UserSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Query")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserSearches");
                });

            modelBuilder.Entity("Core.Entities.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AirPressure")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApplicableDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("ExternalSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxTemp")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinTemp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Predictability")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TheTemp")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Visibility")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherStateAbbr")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherStateImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherStateName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherSummaryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("WindDirection")
                        .HasColumnType("TEXT");

                    b.Property<string>("WindDirectionCompass")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WeatherSummaryId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("Core.Entities.WeatherSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LatitudeLongitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SunRise")
                        .HasColumnType("TEXT");

                    b.Property<string>("SunSet")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserSearchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WoeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserSearchId");

                    b.ToTable("WeatherSummaries");
                });

            modelBuilder.Entity("Core.Entities.LocationSearchResult", b =>
                {
                    b.HasOne("Core.Entities.WeatherSummary", "WeatherSummary")
                        .WithOne("Parent")
                        .HasForeignKey("Core.Entities.LocationSearchResult", "WeatherSummaryId");

                    b.Navigation("WeatherSummary");
                });

            modelBuilder.Entity("Core.Entities.MenuItem", b =>
                {
                    b.HasOne("Core.Entities.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MenuItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Menu");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entities.Source", b =>
                {
                    b.HasOne("Core.Entities.WeatherSummary", "WeatherSummary")
                        .WithMany("Sources")
                        .HasForeignKey("WeatherSummaryId");

                    b.Navigation("WeatherSummary");
                });

            modelBuilder.Entity("Core.Entities.Weather", b =>
                {
                    b.HasOne("Core.Entities.WeatherSummary", "WeatherSummary")
                        .WithMany("ConsolidatedWeather")
                        .HasForeignKey("WeatherSummaryId");

                    b.Navigation("WeatherSummary");
                });

            modelBuilder.Entity("Core.Entities.WeatherSummary", b =>
                {
                    b.HasOne("Core.Entities.UserSearch", "UserSearch")
                        .WithMany()
                        .HasForeignKey("UserSearchId");

                    b.Navigation("UserSearch");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Core.Entities.MenuItem", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Core.Entities.WeatherSummary", b =>
                {
                    b.Navigation("ConsolidatedWeather");

                    b.Navigation("Parent");

                    b.Navigation("Sources");
                });
#pragma warning restore 612, 618
        }
    }
}
